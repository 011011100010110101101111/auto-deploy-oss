package org.gitor.autodeployoss.service;import org.gitor.autodeployoss.entity.ParamsPojo;import org.springframework.beans.factory.annotation.Value;import java.io.BufferedReader;import java.io.InputStreamReader;/** * * oss 抽象类型 * @author : liuwenlong * @date : 2018/5/31 22:56 */public abstract class AbstractOSSService {    @Value("${git.url}")    private String gitUrl;    @Value("${shell.path}")    private String path;    @Value("${git.branch}")    private String branch;    /**     * 克隆代码     * @return 结果     */    private void cloneCode(){        try {            String shpath="/Users/liuwenlong/myApp/github/auto-deploy-oss/src/main/resources/autoDeploy.sh";            String[] shell = new String[4];            shell[0] = shpath;            shell[1] = "https://github.com/gitors/calligraphy.git";            shell[2] = "/Users/liuwenlong/Downloads/test";            shell[3] = "";            Process ps = Runtime.getRuntime().exec(shell);            ps.waitFor();            BufferedReader br = new BufferedReader(new InputStreamReader(ps.getInputStream()));            StringBuilder sb = new StringBuilder();            String line;            while ((line = br.readLine()) != null) {                sb.append(line).append("\n");            }            String result = sb.toString();            System.out.println(result);        }        catch (Exception e) {            e.printStackTrace();        }    }    /**     * 删除oss 原有文件     * @return 结果     */    protected abstract boolean deleteOSS();    /**     * 上传文件至OSS     * @return 结果     */    protected abstract boolean uploadOSS();    public void excute(ParamsPojo paramsPojo){        this.cloneCode();        this.deleteOSS();        this.uploadOSS();    }}
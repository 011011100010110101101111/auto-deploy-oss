package org.gitor.autodeployoss.service;import org.gitor.autodeployoss.dao.LogRepository;import org.gitor.autodeployoss.entity.LogEntity;import org.gitor.autodeployoss.entity.ParamsPojo;import org.gitor.autodeployoss.utils.Contans;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import java.io.BufferedReader;import java.io.File;import java.io.InputStreamReader;import java.util.ArrayList;import java.util.List;/** * * oss 抽象类型 * @author : liuwenlong * @date : 2018/5/31 22:56 */public abstract class AbstractOSSService {    @Value("${git.url}")    protected String gitUrl;    @Value("${shell.path}")    protected String path;    @Value("${git.branch}")    protected String branch;    @Autowired    protected LogRepository logRepository;    protected List<String> filenames = new ArrayList<>();    protected ParamsPojo paramsPojo;    /**     * 克隆代码     * @return 结果     */    private void cloneCode(){        try {            String[] shell = new String[4];            shell[0] = Contans.shellPath;            shell[1] = this.paramsPojo.getGitUrl();            shell[2] = this.paramsPojo.getLocalPath();            shell[3] = this.paramsPojo.getBranch() == null ? "" :this.paramsPojo.getBranch();            logRepository.save(LogEntity.successLog("开始从github 拉取 文件！"));            Process ps = Runtime.getRuntime().exec(shell);            ps.waitFor();            logRepository.save(LogEntity.successLog("从github 拉取文件完毕！"));            BufferedReader br = new BufferedReader(new InputStreamReader(ps.getInputStream()));            StringBuilder sb = new StringBuilder();            String line;            while ((line = br.readLine()) != null) {                sb.append(line).append("\n");            }            String result = sb.toString();            System.out.println(result);            //clone 完成以后开始加载本地文件            logRepository.save(LogEntity.successLog("开始加载本地文件"));            this.getFiles(this.paramsPojo.getLocalPath());            logRepository.save(LogEntity.successLog("已经加载完本地文件，文件数量为："+this.filenames.size()));        }catch (Exception e) {            logRepository.save(LogEntity.errorLog("自动部署出错，错误信息为："+e.getMessage()));            e.printStackTrace();        }    }    /**     * 删除oss 原有文件     * @return 结果     */    protected abstract void deleteOSS();    /**     * 上传文件至OSS     * @return 结果     */    protected abstract void uploadOSS();    public void excute(ParamsPojo paramsPojo){        paramsPojo.setGitUrl("https://github.com/gitors/calligraphy.git");        paramsPojo.setLocalPath("/Users/liuwenlong/Downloads/test");        this.paramsPojo = paramsPojo;        this.cloneCode();        this.deleteOSS();        this.uploadOSS();    }    /**     * 获取本地文件，是已经从git 上 clone 下来的文件     * @param path 存储路径     */    private void getFiles(String path){        File root = new File(path);        File[] files = root.listFiles();        for (File file : files){            if (file.getName().equals(".idea") || file.getName().equals(".DS_Store")){                continue;            }            if (file.isDirectory()){                getFiles(file.getAbsolutePath());            }else {                this.filenames.add(file.getPath());            }        }    }}